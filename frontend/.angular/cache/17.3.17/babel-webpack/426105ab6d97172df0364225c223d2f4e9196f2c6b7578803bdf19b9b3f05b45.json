{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = '/users';\n  }\n  getUsers(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    let params = new HttpParams().set('page', page).set('size', size).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  getUser(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createUser(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  updateUser(id, user) {\n    return this.http.patch(`${this.apiUrl}/${id}`, user);\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","UserService","constructor","http","apiUrl","getUsers","page","size","sortBy","sortDir","params","set","get","getUser","id","createUser","user","post","updateUser","patch","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\igor_\\OneDrive\\Documents\\GitHub\\SOCC-fullstack\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../models/user.model';\r\n\r\nexport interface PagedResult<T> {\r\n  content: T[];\r\n  totalElements: number;\r\n  totalPages: number;\r\n  number: number;\r\n  size: number;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n  private readonly apiUrl = '/users';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUsers(page = 0, size = 10, sortBy = 'name', sortDir = 'asc'): Observable<PagedResult<User>> {\r\n    let params = new HttpParams()\r\n      .set('page', page)\r\n      .set('size', size)\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PagedResult<User>>(this.apiUrl, { params });\r\n  }\r\n\r\n  getUser(id: string): Observable<User> {\r\n    return this.http.get<User>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createUser(user: Partial<User>): Observable<User> {\r\n    return this.http.post<User>(this.apiUrl, user);\r\n  }\r\n\r\n  updateUser(id: string, user: Partial<User>): Observable<User> {\r\n    return this.http.patch<User>(`${this.apiUrl}/${id}`, user);\r\n  }\r\n} "],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAa7D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,MAAM,GAAG,QAAQ;EAEK;EAEvCC,QAAQA,CAACC,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,EAAE,EAAEC,MAAM,GAAG,MAAM,EAAEC,OAAO,GAAG,KAAK;IAC5D,IAAIC,MAAM,GAAG,IAAIV,UAAU,EAAE,CAC1BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAAC,CACjBK,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAAC,CACjBI,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAoB,IAAI,CAACR,MAAM,EAAE;MAAEM;IAAM,CAAE,CAAC;EAClE;EAEAG,OAAOA,CAACC,EAAU;IAChB,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,MAAM,IAAIU,EAAE,EAAE,CAAC;EACpD;EAEAC,UAAUA,CAACC,IAAmB;IAC5B,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAO,IAAI,CAACb,MAAM,EAAEY,IAAI,CAAC;EAChD;EAEAE,UAAUA,CAACJ,EAAU,EAAEE,IAAmB;IACxC,OAAO,IAAI,CAACb,IAAI,CAACgB,KAAK,CAAO,GAAG,IAAI,CAACf,MAAM,IAAIU,EAAE,EAAE,EAAEE,IAAI,CAAC;EAC5D;;;uBAxBWf,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXtB,WAAW;MAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}