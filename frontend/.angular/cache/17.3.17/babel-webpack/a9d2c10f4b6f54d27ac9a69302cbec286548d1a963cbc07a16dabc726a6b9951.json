{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    // URL base da API - ajuste conforme necessário\n    this.apiUrl = 'http://localhost:8080/users';\n    // Flag para controlar se deve usar dados mockados\n    this.useMockData = false;\n  }\n  getUsers(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    if (this.useMockData) {\n      return this.getMockUsers(page, size);\n    }\n    let params = new HttpParams().set('page', page).set('size', size).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(catchError(this.handleError));\n  }\n  getUser(id) {\n    if (this.useMockData) {\n      return this.getMockUser(id);\n    }\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  createUser(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  updateUser(id, user) {\n    if (this.useMockData) {\n      return this.updateMockUser(id, user);\n    }\n    return this.http.patch(`${this.apiUrl}/${id}`, user).pipe(catchError(this.handleError));\n  }\n  // Métodos para dados mockados\n  getMockUsers(page, size) {\n    const mockUsers = [{\n      id: '1',\n      username: 'aelism',\n      name: 'Antônio Elias de Melo',\n      email: 'antonio@inf.ufg.br',\n      phone: '62999999999',\n      workload: 64,\n      status: 'ACTIVE',\n      profiles: [{\n        id: 1,\n        role: 'PROFESSOR',\n        description: 'Professor',\n        protectedProfile: false\n      }]\n    }, {\n      id: '2',\n      username: 'joao',\n      name: 'João Batista',\n      email: 'joao@inf.ufg.br',\n      phone: '62988888888',\n      workload: null,\n      status: 'ACTIVE',\n      profiles: [{\n        id: 2,\n        role: 'DIRECTOR',\n        description: 'Diretor',\n        protectedProfile: true\n      }]\n    }, {\n      id: '3',\n      username: 'luteles',\n      name: 'Luciana de Oliveira Teles',\n      email: 'luteles@inf.ufg.br',\n      phone: '62977777777',\n      workload: 64,\n      status: 'SUSPENDED',\n      profiles: [{\n        id: 1,\n        role: 'PROFESSOR',\n        description: 'Professor',\n        protectedProfile: false\n      }]\n    }];\n    const start = page * size;\n    const end = start + size;\n    const content = mockUsers.slice(start, end);\n    return of({\n      content,\n      totalElements: mockUsers.length,\n      totalPages: Math.ceil(mockUsers.length / size),\n      number: page,\n      size\n    });\n  }\n  getMockUser(id) {\n    const mockUsers = [{\n      id: '1',\n      username: 'aelism',\n      name: 'Antônio Elias de Melo',\n      email: 'antonio@inf.ufg.br',\n      phone: '62999999999',\n      workload: 64,\n      status: 'ACTIVE',\n      profiles: [{\n        id: 1,\n        role: 'PROFESSOR',\n        description: 'Professor',\n        protectedProfile: false\n      }]\n    }, {\n      id: '2',\n      username: 'joao',\n      name: 'João Batista',\n      email: 'joao@inf.ufg.br',\n      phone: '62988888888',\n      workload: null,\n      status: 'ACTIVE',\n      profiles: [{\n        id: 2,\n        role: 'DIRECTOR',\n        description: 'Diretor',\n        protectedProfile: true\n      }]\n    }, {\n      id: '3',\n      username: 'luteles',\n      name: 'Luciana de Oliveira Teles',\n      email: 'luteles@inf.ufg.br',\n      phone: '62977777777',\n      workload: 64,\n      status: 'SUSPENDED',\n      profiles: [{\n        id: 1,\n        role: 'PROFESSOR',\n        description: 'Professor',\n        protectedProfile: false\n      }]\n    }];\n    const user = mockUsers.find(u => u.id === id);\n    return user ? of(user) : throwError(() => new Error('User not found'));\n  }\n  updateMockUser(id, updates) {\n    return this.getMockUser(id).pipe(map(user => ({\n      ...user,\n      ...updates\n    })));\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    return throwError(() => new Error('Something went wrong; please try again later.'));\n  }\n  // Método para alternar entre dados mockados e reais\n  setUseMockData(useMock) {\n    this.useMockData = useMock;\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","of","throwError","catchError","map","UserService","constructor","http","apiUrl","useMockData","getUsers","page","size","sortBy","sortDir","getMockUsers","params","set","get","pipe","handleError","getUser","id","getMockUser","createUser","user","post","updateUser","updateMockUser","patch","mockUsers","username","name","email","phone","workload","status","profiles","role","description","protectedProfile","start","end","content","slice","totalElements","length","totalPages","Math","ceil","number","find","u","Error","updates","error","console","setUseMockData","useMock","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\igor_\\OneDrive\\Documents\\GitHub\\SOCC-fullstack\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { User, Profile } from '../models/user.model';\r\n\r\nexport interface PagedResult<T> {\r\n  content: T[];\r\n  totalElements: number;\r\n  totalPages: number;\r\n  number: number;\r\n  size: number;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n  // URL base da API - ajuste conforme necessário\r\n  private readonly apiUrl = 'http://localhost:8080/users';\r\n  \r\n  // Flag para controlar se deve usar dados mockados\r\n  private useMockData = false;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUsers(page = 0, size = 10, sortBy = 'name', sortDir = 'asc'): Observable<PagedResult<User>> {\r\n    if (this.useMockData) {\r\n      return this.getMockUsers(page, size);\r\n    }\r\n\r\n    let params = new HttpParams()\r\n      .set('page', page)\r\n      .set('size', size)\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PagedResult<User>>(this.apiUrl, { params })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getUser(id: string): Observable<User> {\r\n    if (this.useMockData) {\r\n      return this.getMockUser(id);\r\n    }\r\n\r\n    return this.http.get<User>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createUser(user: Partial<User>): Observable<User> {\r\n    return this.http.post<User>(this.apiUrl, user);\r\n  }\r\n\r\n  updateUser(id: string, user: Partial<User>): Observable<User> {\r\n    if (this.useMockData) {\r\n      return this.updateMockUser(id, user);\r\n    }\r\n\r\n    return this.http.patch<User>(`${this.apiUrl}/${id}`, user)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // Métodos para dados mockados\r\n  private getMockUsers(page: number, size: number): Observable<PagedResult<User>> {\r\n    const mockUsers: User[] = [\r\n      {\r\n        id: '1',\r\n        username: 'aelism',\r\n        name: 'Antônio Elias de Melo',\r\n        email: 'antonio@inf.ufg.br',\r\n        phone: '62999999999',\r\n        workload: 64,\r\n        status: 'ACTIVE',\r\n        profiles: [{ id: 1, role: 'PROFESSOR', description: 'Professor', protectedProfile: false }]\r\n      },\r\n      {\r\n        id: '2',\r\n        username: 'joao',\r\n        name: 'João Batista',\r\n        email: 'joao@inf.ufg.br',\r\n        phone: '62988888888',\r\n        workload: null,\r\n        status: 'ACTIVE',\r\n        profiles: [{ id: 2, role: 'DIRECTOR', description: 'Diretor', protectedProfile: true }]\r\n      },\r\n      {\r\n        id: '3',\r\n        username: 'luteles',\r\n        name: 'Luciana de Oliveira Teles',\r\n        email: 'luteles@inf.ufg.br',\r\n        phone: '62977777777',\r\n        workload: 64,\r\n        status: 'SUSPENDED',\r\n        profiles: [{ id: 1, role: 'PROFESSOR', description: 'Professor', protectedProfile: false }]\r\n      }\r\n    ];\r\n\r\n    const start = page * size;\r\n    const end = start + size;\r\n    const content = mockUsers.slice(start, end);\r\n\r\n    return of({\r\n      content,\r\n      totalElements: mockUsers.length,\r\n      totalPages: Math.ceil(mockUsers.length / size),\r\n      number: page,\r\n      size\r\n    });\r\n  }\r\n\r\n  private getMockUser(id: string): Observable<User> {\r\n    const mockUsers: User[] = [\r\n      {\r\n        id: '1',\r\n        username: 'aelism',\r\n        name: 'Antônio Elias de Melo',\r\n        email: 'antonio@inf.ufg.br',\r\n        phone: '62999999999',\r\n        workload: 64,\r\n        status: 'ACTIVE',\r\n        profiles: [{ id: 1, role: 'PROFESSOR', description: 'Professor', protectedProfile: false }]\r\n      },\r\n      {\r\n        id: '2',\r\n        username: 'joao',\r\n        name: 'João Batista',\r\n        email: 'joao@inf.ufg.br',\r\n        phone: '62988888888',\r\n        workload: null,\r\n        status: 'ACTIVE',\r\n        profiles: [{ id: 2, role: 'DIRECTOR', description: 'Diretor', protectedProfile: true }]\r\n      },\r\n      {\r\n        id: '3',\r\n        username: 'luteles',\r\n        name: 'Luciana de Oliveira Teles',\r\n        email: 'luteles@inf.ufg.br',\r\n        phone: '62977777777',\r\n        workload: 64,\r\n        status: 'SUSPENDED',\r\n        profiles: [{ id: 1, role: 'PROFESSOR', description: 'Professor', protectedProfile: false }]\r\n      }\r\n    ];\r\n\r\n    const user = mockUsers.find(u => u.id === id);\r\n    return user ? of(user) : throwError(() => new Error('User not found'));\r\n  }\r\n\r\n  private updateMockUser(id: string, updates: Partial<User>): Observable<User> {\r\n    return this.getMockUser(id).pipe(\r\n      map(user => ({ ...user, ...updates }))\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    console.error('An error occurred:', error);\r\n    return throwError(() => new Error('Something went wrong; please try again later.'));\r\n  }\r\n\r\n  // Método para alternar entre dados mockados e reais\r\n  setUseMockData(useMock: boolean) {\r\n    this.useMockData = useMock;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}